#!/bin/bash

# Install necessary packages if not already installed
apt update
apt install -y jq curl

# Function to print error messages and exit
function error_exit {
    echo "Error: $1" >&2
    exit 1
}

# Constants and variables
DOMAIN="nt-vps.com"
SUB_DOMAIN="NT-$(head /dev/urandom | tr -dc a-z0-9 | head -c 5).vipssh.online"
CF_ID="foodv776@gmail.com"
CF_KEY="ed22c2673b2e8ee27c776db85e6546f4a510c"  # Update with your API token
IP=$(curl -s ipinfo.io/ip)
API_URL="https://api.cloudflare.com/client/v4"
ZONE_ID="195c976c61503b6d1d6cf1fec47edf0a"  # Update with your zone ID

# Function to update DNS record in Cloudflare
function update_dns_record {
    local zone_id="$1"
    local record_id="$2"
    local response=$(curl -sX PUT "${API_URL}/zones/${zone_id}/dns_records/${record_id}" \
                    -H "Authorization: Bearer ${CF_KEY}" \
                    -H "Content-Type: application/json" \
                    --data '{"type":"A","name":"'${SUB_DOMAIN}'","content":"'${IP}'","ttl":null,"proxied":false}') || error_exit "Failed to execute API request: PUT ${API_URL}/zones/${zone_id}/dns_records/${record_id}"
    echo "$response"
}

# Main script execution
set -euo pipefail

echo "Record DNS $SUB_DOMAIN..."

# Check if DNS record exists
RECORD=$(curl -sX GET "${API_URL}/zones/${ZONE_ID}/dns_records?name=${SUB_DOMAIN}" \
     -H "Authorization: Bearer ${CF_KEY}" \
     -H "Content-Type: application/json" | jq -r .result[0].id)

if [[ "${#RECORD}" -le 10 ]]; then
    # Create DNS record if it doesn't exist
    RECORD=$(curl -sX POST "${API_URL}/zones/${ZONE_ID}/dns_records" \
    -H "Authorization: Bearer ${CF_KEY}" \
    -H "Content-Type: application/json" \
    --data '{"type":"A","name":"'${SUB_DOMAIN}'","content":"'${IP}'","proxied":false}' | jq -r .result.id) || error_exit "Failed to create DNS record in Cloudflare."
fi

# Update DNS record with current IP and auto TTL
update_dns_record "$ZONE_ID" "$RECORD"

# Output confirmation
echo "Host: $SUB_DOMAIN"
echo "Done Record Domain: $SUB_DOMAIN for VPS"

# Update configuration files (ensure directories exist)
mkdir -p /root/xray/
echo "$SUB_DOMAIN" > /root/xray/scdomain

echo "Script execution completed."
echo "Host : $SUB_DOMAIN"
echo "IP=$SUB_DOMAIN" > /var/lib/ipvps.conf
echo "$SUB_DOMAIN" > /root/domain
echo "$SUB_DOMAIN" > /etc/xray/domain
echo "$SUB_DOMAIN" > /etc/v2ray/domain
echo "$SUB_DOMAIN" > /root/scdomain
echo "$SUB_DOMAIN" > /root/xray/scdomain
echo -e "Done Record Domain= ${SUB_DOMAIN} For VPS"
rm -rf cf
sleep 1
